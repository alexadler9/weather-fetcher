plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
}

android {
    namespace 'ru.alexadler9.weatherfetcher'
    compileSdk 34

    defaultConfig {
        applicationId "ru.alexadler9.weatherfetcher"
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
        }
    }

    buildFeatures {
        viewBinding true
    }

    flavorDimensions 'version'
    productFlavors {
        mock {
            dimension 'version'
            applicationIdSuffix = ".mock"
            buildConfigField "String", "WEATHER_BASE_URL", '"https://mock.api"'
            buildConfigField "String", "WEATHER_ICON_URL", '""'
            buildConfigField "String", "WEATHER_API_KEY", '""'
        }
        prod {
            dimension 'version'
            buildConfigField "String", "WEATHER_BASE_URL", '"https://api.openweathermap.org/"'
            buildConfigField "String", "WEATHER_ICON_URL", '"https://openweathermap.org/img/wn/%s@2x.png"'
            buildConfigField "String", "WEATHER_API_KEY", '"63defae2a41ce41a3f41adfd722c0e72"'
        }
    }

    sourceSets {
        mock {
            assets {
                srcDirs 'src\\mock\\assets', 'src\\mock\\java\\ru\\alexadler9\\weatherfetcher\\feature\\weatherscreen\\data\\remote\\mock\\assets'
            }
        }
    }
}

dependencies {

    def recyclerview_version = "1.3.2"
    def prefs_version = "1.5.0"
    def retrofit_version = "2.9.0"
    def gson_version = "2.10.1"
    def glide_version = "4.13.0"
    def koin_version = "3.3.2"

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.10.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "androidx.recyclerview:recyclerview:$recyclerview_version"
    // This library incorporates annotation processing to ensure the compile time verification for user-defined shared preferences
    implementation "co.windly:ktx-prefs:$prefs_version"
    kapt "co.windly:ktx-prefs-compiler:$prefs_version"
    // A type-safe HTTP client for Android and Java
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    // Library that can be used to convert Java Objects into their JSON representation
    implementation "com.google.code.gson:gson:$gson_version"
    // A Retrofit Converter which uses Gson for serialization
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    // An image loading
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"
    // Kotlin simple Dependency Injection Framework
    implementation "io.insert-koin:koin-android:$koin_version"
    testImplementation "org.junit.jupiter:junit-jupiter:5.10.1"
    // Library for checking conditions
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    // Mockito mock objects library core API
    testImplementation 'org.mockito:mockito-core:5.7.0'
    // Mockito preconfigured inline mock maker
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3"
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}